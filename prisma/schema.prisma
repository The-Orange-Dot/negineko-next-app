generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  "postgres://espmmtgwoesfgi:76d3974d9e396f577c6b4139f258c75d5a8cda346397ebb35687be6d607684c8@ec2-3-234-85-177.compute-1.amazonaws.com:5432/d682h0q44a3rij?schema=public&connection_limit=1"
  shadowDatabaseUrl = "postgres://odjgzujwvrrzin:d62b560d695ad30424b33c1c43f3d4a52bd1b0a3546e8aa73f3ab938615295e6@ec2-23-23-182-238.compute-1.amazonaws.com:5432/d8uo0va0k09846"

}

model Location {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String   @default("")
  address     String   @unique
  map         String   @unique
  description String[]
  website     String   @default("")
  twitter     String   @default("")
  instagram   String   @default("")
  createdAt   DateTime @default(now())
  caption     String   @default("")
  twitchClip  String   @default("")
  twitchVideo String   @default("")
  thumbnail   String   @default("")
  sns         String   @default("")
  likes       Int      @default(0)
  prefecture  String   @default("")
  city        String   @default("")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  location_likes String[]
  streamer      Boolean   @default(false)
  mods          Mod[]  
  mod           Boolean   @default(false)
  modRequestSent String[]
  modRequestReceived String[]
  modsPending   String[]
  modFor        String?   @default("")
}

model Mod {
  id            String    @id @default(cuid())
  streamer      String
  name          String    @default("")
  pending       Boolean   @default(true)
  image         String    @default("/images/placeholder.png")           
  user          User      @relation(fields: [streamer], references: [name], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  price_id    String    @unique
  images      String[]  
  description String
  price       String    
  sold        Boolean   @default(false)
  buyer       String    @default("")
}